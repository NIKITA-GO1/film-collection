// Code generated by MockGen. DO NOT EDIT.
// Source: film-collection/internal/film/repository.go

// Package film is a generated GoMock package.
package film

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddActorToFilm mocks base method.
func (m *MockRepository) AddActorToFilm(filmID, actorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActorToFilm", filmID, actorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddActorToFilm indicates an expected call of AddActorToFilm.
func (mr *MockRepositoryMockRecorder) AddActorToFilm(filmID, actorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActorToFilm", reflect.TypeOf((*MockRepository)(nil).AddActorToFilm), filmID, actorID)
}

// DeleteActorFromFilm mocks base method.
func (m *MockRepository) DeleteActorFromFilm(filmID, actorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorFromFilm", filmID, actorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorFromFilm indicates an expected call of DeleteActorFromFilm.
func (mr *MockRepositoryMockRecorder) DeleteActorFromFilm(filmID, actorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorFromFilm", reflect.TypeOf((*MockRepository)(nil).DeleteActorFromFilm), filmID, actorID)
}

// DeleteFilm mocks base method.
func (m *MockRepository) DeleteFilm(filmID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", filmID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockRepositoryMockRecorder) DeleteFilm(filmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockRepository)(nil).DeleteFilm), filmID)
}

// SaveFilm mocks base method.
func (m *MockRepository) SaveFilm(film *Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilm", film)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFilm indicates an expected call of SaveFilm.
func (mr *MockRepositoryMockRecorder) SaveFilm(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilm", reflect.TypeOf((*MockRepository)(nil).SaveFilm), film)
}

// UpdateFilm mocks base method.
func (m *MockRepository) UpdateFilm(db *sql.DB, id int, name, discription, releaseDate string, rate int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", db, id, name, discription, releaseDate, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockRepositoryMockRecorder) UpdateFilm(db, id, name, discription, releaseDate, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockRepository)(nil).UpdateFilm), db, id, name, discription, releaseDate, rate)
}
