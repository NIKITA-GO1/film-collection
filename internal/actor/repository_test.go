// Code generated by MockGen. DO NOT EDIT.
// Source: film-collection/internal/actor/repository.go

// Package actor is a generated GoMock package.
package actor

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteActor mocks base method.
func (m *MockRepository) DeleteActor(db *sql.DB, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockRepositoryMockRecorder) DeleteActor(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockRepository)(nil).DeleteActor), db, id)
}

// SaveActor mocks base method.
func (m *MockRepository) SaveActor(actor *Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveActor", actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveActor indicates an expected call of SaveActor.
func (mr *MockRepositoryMockRecorder) SaveActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveActor", reflect.TypeOf((*MockRepository)(nil).SaveActor), actor)
}

// UpdateActor mocks base method.
func (m *MockRepository) UpdateActor(db *sql.DB, id int, name, gender, birthDate any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", db, id, name, gender, birthDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockRepositoryMockRecorder) UpdateActor(db, id, name, gender, birthDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockRepository)(nil).UpdateActor), db, id, name, gender, birthDate)
}
